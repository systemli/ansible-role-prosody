-- Prosody XMPP Server Configuration
--
-- Information on configuring Prosody can be found on our
-- website at https://prosody.im/doc/configure
--
-- Tip: You can check that the syntax of this file is correct
-- when you have finished by running this command:
--     prosodyctl check config
-- If there are any errors, it will let you know what and where
-- they are, otherwise it will keep quiet.
--
-- Good luck, and happy Jabbering!


---------- Server-wide settings ----------
-- Settings in this section apply to the whole server and are the default settings
-- for any virtual hosts

-- This is a (by default, empty) list of accounts that are admins
-- for the server. Note that you must create the accounts separately
-- (see https://prosody.im/doc/creating_accounts for info)
-- Example: admins = { "user1@example.com", "user2@example.net" }
admins = {
{% for admin in prosody_admins %}
	"{{ admin }}@{{ prosody_vhost }}",
{% endfor %}
}

-- Enable use of libevent for better performance under high load
-- For more information see: https://prosody.im/doc/libevent
{% if prosody_libevent|default(True) %}
network_backend = "event"
{% endif %}

-- Prosody will always look in its source directory for modules, but
-- this option allows you to specify additional locations where Prosody
-- will look for modules first. For community modules, see https://modules.prosody.im/
plugin_paths = {
	"{{ prosody_external_modules_dir }}"
}

-- This is the list of modules Prosody will load on startup.
-- It looks for mod_modulename.lua in the plugins folder, so make sure that exists too.
-- Documentation for bundled modules can be found at: https://prosody.im/doc/modules
modules_enabled = {

	-- Generally required
		"roster"; -- Allow users to have a roster. Recommended ;)
		"saslauth"; -- Authentication for clients and servers. Recommended if you want to log in.
		"tls"; -- Add support for secure TLS on c2s/s2s connections
		"dialback"; -- s2s dialback support
		"disco"; -- Service discovery

	-- Nice to have
		--"version"; -- Replies to server version requests
		"uptime"; -- Report how long server has been running
		"time"; -- Let others know the time here on this server
		"ping"; -- Replies to XMPP pings with pongs
		"register"; -- Allow users to register on this server using a client and change passwords

	-- HTTP modules
		--"http_files"; -- Serve static files from a directory over HTTP

	-- Other specific functionality
		--"groups"; -- Shared roster support
		--"watchregistrations"; -- Alert admins of registrations
		--"motd"; -- Send a message to users when they log in
		--"legacyauth"; -- Legacy authentication. Only used by some old clients and bots.
{% if prosody_limits %}
		"limits"; -- Enable bandwidth limiting for XMPP connections
{% endif %}
{% if prosody_monitoring %}
		"munin";
{% endif %}

	-- Core Modules
{% for module in prosody_modules %}
		"{{ module }}";
{% endfor %}


	-- External
{% for module in prosody_external_modules %}
		"{{ module }}";
{% endfor %}
{% if prosody_motd and not prosody_motd is string %}
		"motd_sequential";
{% endif %}
{% if prosody_external_services is defined %}
		"extdisco";
{% endif %}
{% if prosody_turncredentials_host is defined and prosody_turncredentials_secret is defined%}
		"turncredentials";
{% endif %}
}

{% if prosody_motd %}
motd_sequential_messages = {
{% if prosody_motd is string %}
	[[{{ prosody_motd }}]],
{% else %}
{% for message in prosody_motd %}
	[[{{ message }}]],
{% endfor %}
{% endif %}
}
{% endif %}

{% if prosody_welcome_msg %}
welcome_message = "{{ prosody_welcome_msg }}"
{% endif %}

{% if 'register_redirect' in prosody_external_modules %}
registration_allowlist = { "{{ prosody_mod_register_redirect_registration_allowlist }}" }
registration_url = "{{ prosody_mod_register_redirect_registration_url }}"
registration_text = "{{ prosody_mod_register_redirect_text }}"

{% if prosody_external_services is defined %}
external_services = {
{% for service in prosody_external_services %}
    ["{{ service.uri }}"] = {
{% if service.name is defined %}
        name="{{ service.name }}";
{% endif %}
        port="{{ service.port }}";
        transport="{{ service.transport }}";
        type="{{ service.type }}";
{% if service.username is defined %}
        username="{{ service.username }}";
        password="{{ service.guest }}";
{% endif %}
    };
{% endfor %}
}
{% endif %}

{% if prosody_turncredentials_host is defined and prosody_turncredentials_secret is defined %}
turncredentials_host = "{{ prosody_turncredentials_host }}"
turncredentials_secret = "{{ prosody_turncredentials_secret }}"
{% endif %}

-- Registration Throttling
min_seconds_between_registrations = {{ prosody_mod_register_min_seconds_between_registrations }}
{% endif %}

-- These modules are auto-loaded, but should you want
-- to disable them then uncomment them here:
modules_disabled = {
	-- "offline"; -- Store offline messages
	-- "c2s"; -- Handle client connections
	-- "s2s"; -- Handle server-to-server connections
	-- "posix"; -- POSIX functionality, sends server to background, enables syslog, etc.
}

-- Disable account creation by default, for security
-- For more information see https://prosody.im/doc/creating_accounts
-- allow_registration = true

-- These are the SSL/TLS-related settings. If you don't want
-- to use SSL/TLS, you may comment or remove this
ssl = {
	certificate = "/etc/prosody/certs/{{ prosody_vhost }}.crt";
	key = "/etc/prosody/certs/{{ prosody_vhost }}.key";
	-- only most secure TLS versions
	protocol = "tlsv1_2+";
{% if not __testing|default(False) %}
	dhparam = "/etc/prosody/certs/dh-{{ prosody_dhparam_length }}.pem"
{% endif %}
}
{% if prosody_legacy_ssl_ports is defined %}
legacy_ssl_ports = {{ prosody_legacy_ssl_ports }}
{% endif %}

-- Force clients to use encrypted connections? This option will
-- prevent clients from authenticating unless they are using encryption.

c2s_require_encryption = true

-- Force servers to use encrypted connections? This option will
-- prevent servers from authenticating unless they are using encryption.

s2s_require_encryption = true

-- Force certificate authentication for server-to-server connections?

s2s_secure_auth = false

-- Some servers have invalid or self-signed certificates. You can list
-- remote domains here that will not be required to authenticate using
-- certificates. They will be authenticated using DNS instead, even
-- when s2s_secure_auth is enabled.

--s2s_insecure_domains = { "insecure.example" }

-- Even if you disable s2s_secure_auth, you can still require valid
-- certificates for some domains by specifying a list here.

--s2s_secure_domains = { "jabber.org" }

-- Required for init scripts and prosodyctl
pidfile = "/var/run/prosody/prosody.pid"

-- Select the authentication backend to use. The 'internal' providers
-- use Prosody's configured data storage to store the authentication data.

authentication = "{{ prosody_authentication }}"

-- Select the storage backend to use. By default Prosody uses flat files
-- in its configured data directory, but it also supports more backends
-- through modules. An "sql" backend is included by default, but requires
-- additional dependencies. See https://prosody.im/doc/storage for more info.

default_storage = "internal" -- Default is "internal"

storage = {
	archive = "memory", -- Store MAM msgs in memory only for privacy reasons
	archive2 = "memory", -- we're apparently still using mod_mam from prosody-modules 
}

-- For the "sql" backend, you can uncomment *one* of the below to configure:
--sql = { driver = "SQLite3", database = "prosody.sqlite" } -- Default. 'database' is the filename.
--sql = { driver = "MySQL", database = "prosody", username = "prosody", password = "secret", host = "localhost" }
--sql = { driver = "PostgreSQL", database = "prosody", username = "prosody", password = "secret", host = "localhost" }


-- Archiving configuration
-- If mod_mam is enabled, Prosody will store a copy of every message. This
-- is used to synchronize conversations between multiple clients, even if
-- they are offline. This setting controls how long Prosody will keep
-- messages in the archive before removing them.

archive_expires_after = "{{ prosody_mam_archive_expires_after }}" -- Remove archived messages after ?
default_archive_policy = {{ prosody_mam_default_archive_policy }}

-- You can also configure messages to be stored in-memory only. For more
-- archiving options, see https://prosody.im/doc/modules/mod_mam

-- Logging configuration
-- For advanced logging see https://prosody.im/doc/logging
log = {
	{{ prosody_log_level }} = "*syslog"; -- Requires mod_posix to be loaded
	-- "*console"; -- Log to the console, useful for debugging with daemonize=false
}

-- Uncomment to enable statistics
-- For more info see https://prosody.im/doc/statistics
statistics = "internal"

-- Certificates
-- Every virtual host and component needs a certificate so that clients and
-- servers can securely verify its identity. Prosody will automatically load
-- certificates/keys from the directory specified here.
-- For more information, including how to use 'prosodyctl' to auto-import certificates
-- (from e.g. Let's Encrypt) see https://prosody.im/doc/certificates

-- Location of directory to find certificates in (relative to main config file):
certificates = "certs"

{% if 'reload_modules' in prosody_external_modules %}
-- reload modules on configuration change
reload_modules = {
{% for module in prosody_external_modules %}
	"{{ module }}",
{% endfor %}
{% if prosody_motd and not prosody_motd is string %}
	"motd_sequential",
{% endif %}
}
{% endif %}

----------- Limits -----------
{% if prosody_limits %}
limits = {
	c2s = {
		rate = "{{ prosody_limits_c2s_rate }}";
		burst = "{{ prosody_limits_c2s_burst }}";
	};
}
{% endif %}

{% if 'http_upload' in prosody_external_modules %}
http_upload_file_size_limit = {{ prosody_http_upload_file_size_limit }}
http_upload_expire_after = {{ prosody_http_upload_expire_after }}
http_upload_quota = {{ prosody_http_upload_quota }}
{% endif %}

-- http config
-- Limit http interfaces to localhost
http_interfaces = { "127.0.0.1" }
http_default_host = "{{ prosody_vhost }}"

{% if prosody_custom_registration_theme %}

------ Appearance ------

-- Register Web Template files
register_web_template = "{{ prosody_custom_registration_theme_path }}"

{% endif %}

{% if 's2s_blacklist' in prosody_external_modules %}
s2s_blacklist = {
{% for host in prosody_s2s_blacklist %}
	"{{ host }}",
{% endfor %}
}
{% endif %}

------ Contact Info ------
contact_info = {
{% for contact in prosody_contacts %}
	{{ contact.name }} = { "{{ contact.address }}" };
{% endfor %}
};

{% if prosody_monitoring %}
------ Monitoring ------
munin_ports = { 4950 }
{% endif %}

-- HTTPS currently only supports a single certificate, specify it here:
--https_certificate = "/etc/prosody/certs/localhost.crt"

----------- Virtual hosts -----------
-- You need to add a VirtualHost entry for each domain you wish Prosody to serve.
-- Settings under each VirtualHost entry apply *only* to that host.

--VirtualHost "example.com"
--	certificate = "/path/to/example.crt"

{% for vhost in prosody_virtual_hosts %}
VirtualHost "{{ vhost.name }}"
{% if vhost.cert is defined and vhost.key is defined %}
	ssl = {
		certificate = "{{ vhost.name }}.crt";
		key = "{{ vhost.name }}.key";
	}
{% endif %}
{% if vhost.admins is defined %}
	admins = {
{% for admin in vhost.admins %}
		"{{ admin }}",
{% endfor %}
	}
{% endif %}
{% endfor %}

------ Components ------
-- You can specify components to add hosts that provide special services,
-- like multi-user conferences, and transports.
-- For more information on components, see https://prosody.im/doc/components

{% for vhost in prosody_virtual_hosts %}
---Set up a MUC (multi-user chat) room server:
Component "conference.{{ vhost.name }}" "muc"
	modules_enabled = {
{% for module in prosody_muc_modules %}
		"{{ module }}";
{% endfor %}
	}
	restrict_room_creation = "local"
	-- Disable logging by default (can be enabled in room config)
	muc_log_by_default = {{ prosody_muc_log_by_default }}
	muc_log_all_rooms = false -- set to true to force logging of all rooms
	max_history_messages = {{ prosody_max_history_messages }}

Component "pubsub.{{ vhost.name }}" "pubsub"

{% endfor %}
-- Set up a SOCKS5 bytestream proxy for server-proxied file transfers:
Component "{{ prosody_proxy }}" "proxy65"
    proxy65_acl = { "{{ prosody_virtual_hosts|map(attribute='name')|join(', ') }}" }
{% if prosody_proxy_ssl_cert is defined and prosody_proxy_ssl_key is defined %}
	ssl = {
		key = "/etc/prosody/certs/proxy.key";
		certificate = "/etc/prosody/certs/proxy.pem";
	}
{% endif %}
